// <-----------------Topological sort using concept of BFS or KAHN's algorithm-------------->
#include<bits/stdc++.h>
using namespace std;
vector<int> topoLogicalSort(int vertex,vector<vector<int>>&edges){
	unordered_map<int,list<int>>adjList;
	cout<<endl<<endl<<"Adjecency list:"<<endl<<endl;
	for(int i=0;i<edges.size();i++){
		int u=edges[i][0];
		int v=edges[i][1];
		
		adjList[u].push_back(v);
	}
	for(auto i:adjList){
		cout<<i.first<<"->";
		for(auto j:i.second){
			cout<<j<<" ";
		}
		cout<<endl;
	}
	cout<<endl;
	unordered_map<int,bool>visited;
	//find all indegree
	vector<int>indegree(vertex);
	for(auto i:adjList){
		for(auto j:i.second){
			indegree[j]++;	
		}
	}
		
	//0 indegree node push in queue
	queue<int>q;
	for(int i=0;i<vertex;i++){
		if(indegree[i]==0){
			q.push(i);
		}
	}
	
	// do bfs
	vector<int>ans;
	while(!q.empty()){
		int front=q.front();
		q.pop();
		ans.push_back(front);
		
		//neighbour indgree update
		for(auto neighbour:adjList[front]){
			indegree[neighbour]--;
			if(indegree[neighbour]==0){
				q.push(neighbour);
			}
		}
	}	
	return ans;
}
int main(){
	int vertex,edgeCount;
	cout<<"Enter the number of vertex:";
	cin>>vertex;
	cout<<"Enter the number of edgeCount:";
	cin>>edgeCount;
	
	vector<vector<int>>edges(edgeCount,vector<int>(2));
	for(int i=0;i<edgeCount;i++){
		cin>>edges[i][0] >> edges[i][1];
	}
	vector<int>ans=topoLogicalSort(vertex,edges);
	cout<<"Topological sort:";
	for(auto i:ans){
		cout<<i<<" ";
	}
	
}
