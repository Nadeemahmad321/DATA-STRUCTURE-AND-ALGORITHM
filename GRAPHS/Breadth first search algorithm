#include<iostream>
#include<map>
#include<unordered_map>
#include<list>
#include<set>
#include<queue>
#include<vector>
using namespace std;

// adding edge to node
void addEdge(unordered_map<int,list<int>>&adjList,vector<vector<int>> &edges){
    for(int i=0;i<edges.size();i++){
        int u=edges[i][0];
        int v=edges[i][1];
        
        // connect edge from u to v
        adjList[u].push_back(v);
        // for undirected graph
        // connect edge from v to u
        adjList[v].push_back(u); 
    }
}

// main logic of breadth first search algorithm
void bfs(unordered_map<int,list<int>>&adjList,unordered_map<int,bool>&visited,vector<int>&ans,int node){
    queue<int>q;
    q.push(node);
    visited[node]=true;
    
    while(!q.empty()){
        int frontNode=q.front();
        q.pop();
        ans.push_back(frontNode);
        
        for(auto i:adjList[frontNode]){
            if(!visited[i]){
                q.push(i);
                visited[i]=true;
            }
        }
    }
}
// Breadth first search
vector<int> BreadthFirstSearch(int vertex,vector<vector<int>> &edges){
    vector<int>ans; // store final answer
    
    // here we can use set instead of list for better solution
    unordered_map<int,list<int>>adjList; // used for node connection 
    unordered_map<int,bool>visited; // check node is visited or not 
    
    // add edge with nodes
    addEdge(adjList,edges);
    
    // check for all node including diconnected graph
    for(int i=0;i<vertex;i++){
        if(!visited[i]){
            // main breadth first search logic function
            bfs(adjList,visited,ans,i);
        }
    }
    return ans;
}
// main funtion
int main(){
    
    // number of vertex in Graph
    int vertex;
    cout<<"Enter the number of vertex:";
    cin>>vertex;
    
    // number of edges in Graph
    int edgeCount;
    cout<<"Enter the number of edge:";
    cin>>edgeCount;
    
    // taking input from user
    vector<vector<int>> edges(edgeCount,vector<int>(2));
    cout << "Enter the edges (u v) pairs:\n";
    for(int i=0;i<edgeCount;i++){
        cin>>edges[i][0] >> edges[i][1];
    }
    
    // breadth first search function 
    cout<<"BFS is:";
    vector<int>BFS=BreadthFirstSearch(vertex,edges);
    
    // printing final answer
    for(int i=0;i<BFS.size();i++){
        cout<<BFS[i]<<" ";
    }
    return 0;
}
