/* <---------------CYCLE DETECTION IN UNDIRECTED GRAPH USING BFS CONCEPT---------------->*/
#include<bits/stdc++.h>
using namespace std;
// main logic of cycle detection using bfs concept
bool bfsConceptForCycleDetection(unordered_map<int,list<int>>&adjList,unordered_map<int,bool>&visited,int src){
	unordered_map<int,int>parent;  // map is use for storing parent corresponding to node
	parent[src] = -1;
	visited[src] = true;
	queue<int>q;
	q.push(src);
	
	// check untill queue is not empty
	// same as BFS concept
	while(!q.empty()){
		int frontNode = q.front();
		q.pop();
		
		//checking neighbour
		for(auto neighbour:adjList[frontNode]){
			if(!visited[neighbour]){
				q.push(neighbour);
				visited[neighbour]=true;
				parent[neighbour]=frontNode;
			}
			// must consider this line -> !important condtion <-
			else if(visited[neighbour] == true && neighbour != parent[frontNode]){
				return true;  // cycle is present
			}
		}
	}
	return false; // cycle is not present
}

//cycle dectection 
string cycleDetectionInUndirectedGraph(int vertex,vector<vector<int>>&edges){
	// creation af adjeceny list
	unordered_map<int,list<int>>adjList;
	for(int i = 0;i<edges.size();i++){
		int u = edges[i][0];
		int v = edges[i][1];
		
		// node connection
		adjList[u].push_back(v);
		// for undirected graph
		adjList[v].push_back(u);
	}
	
	unordered_map<int,bool>visited;
	
	// check for all nodes (it means also check for disconnected graph)
	for(int i = 0;i<vertex;i++){
		if(!visited[i]){
			// is cycle present
			bool ans = bfsConceptForCycleDetection(adjList,visited,i);
			if(ans == 1){
				return "YES";
			}
		}
	}
	return "NO";
}
int main(){
	// taking input from user
	int vertex,edgeCount;
	cout<<"Enter the number of vertex:";
	cin>>vertex;
	cout<<"Enter the number of edgeCount:";
	cin>>edgeCount; // number of edge
	
	//creation of edges;
	vector<vector<int>>edges(edgeCount,vector<int>(2));
	cout << "Enter edge (u v):"<<endl;
	for(int i = 0;i<edgeCount;i++){
		cin>>edges[i][0] >> edges[i][1];
	}
	// Cycle detection function call
	string ans = cycleDetectionInUndirectedGraph(vertex,edges);
	//printing yes or no on the basis of cycle present is not
	cout<<"Cycle is present :"<<ans;
}
