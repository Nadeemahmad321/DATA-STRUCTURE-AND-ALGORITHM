// <--------------------------------DIJKSTRA ALGORITHM---------------------------->
#include<bits/stdc++.h>
using namespace std;
//DIJKSTRA ALGORITHM
vector<int> dijkstraAlgorithm(int vertex,vector<vector<int>>&edges,int src){
	unordered_map<int,list<pair<int,int>>>adjList;
	for(int i=0;i<edges.size();i++){
		int u=edges[i][0];
		int v=edges[i][1];
		int w=edges[i][2];
		
		adjList[u].push_back({v,w});
		adjList[v].push_back({u,w});
	}
	
	vector<int>dist(vertex);
	for(int i=0;i<vertex;i++){
		dist[i]=INT_MAX;
	}
	
	// first node initialize with zero
	dist[src]=0;
	set<pair<int,int>>st;
	// first is distance and second is node
	st.insert(make_pair(0,src));
	
	while(!st.empty()){
		// fetch top record
		auto top = *(st.begin());
		
		int nodeDistance=top.first;
		int topNode=top.second;
		
		//remove top record now
		st.erase(st.begin());
		
		//traverse on neighbour
		for(auto neighbour: adjList[topNode]){
			if(nodeDistance + neighbour.second < dist[neighbour.first]){
				auto record=st.find(make_pair(dist[neighbour.first],neighbour.first));
				// if record found,then erase it
				if(record != st.end()){
					st.erase(record);
				}
				
				//distance update
				dist[neighbour.first]=nodeDistance + neighbour.second;
				//record push in set
				st.insert(make_pair(dist[neighbour.first],neighbour.first));
			}
		}	
	}
	return dist;
}
int main(){
	int vertex,edgeCount;
	cout<<"Enter the number of vertex:";
	cin>>vertex;
	cout<<"Enter the number of edgeCount:";
	cin>>edgeCount;
	
	// Taking input from user
	vector<vector<int>>edges(edgeCount,vector<int>(3));
	cout << "Enter edges (u v w):" << endl;
	for(int i=0;i<edgeCount;i++){
		cin>>edges[i][0] >> edges[i][1] >>edges[i][2];
	}
	
	int sourceNode;
	cout<<"Enter the source:";
	cin>>sourceNode;
	
	// dijkstra algorithm for finding shortest path between two nodes
	vector<int>ans=dijkstraAlgorithm(vertex,edges,sourceNode);
	
	// printing final answer
	cout <<endl<< "Shortest paths from node " << sourceNode << ":\n";
	for(int i=0;i<ans.size();i++){
		cout<<"Node "<<i<<":"<<ans[i]<<endl;
	}
}
