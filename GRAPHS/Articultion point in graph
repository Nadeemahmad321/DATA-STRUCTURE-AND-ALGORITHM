// <----------------------------Articultion point in graph-------------------------------->
#include <bits/stdc++.h>
using namespace std;

void dfs(int node, int parent, vector<int>& disc, vector<int>& low,
         unordered_map<int, bool>& visited, unordered_map<int, list<int>>& adjList,
         vector<bool>& ap, int& timer) {
    visited[node] = true;
    disc[node] = low[node] = timer++;
    int child = 0;

    for (auto neighbour : adjList[node]) {
        if (neighbour == parent) {
            continue;
        }
        if (!visited[neighbour]) {
            dfs(neighbour, node, disc, low, visited, adjList, ap, timer);
            low[node] = min(low[node], low[neighbour]);
            if (low[neighbour] >= disc[node] && parent != -1) {
                ap[node] = true;
            }
            child++;
        } else {
            low[node] = min(low[node], disc[neighbour]);
        }
    }
    if (parent == -1 && child > 1) {
        ap[node] = true;
    }
}

int main() {
    int vertex, edgeCount;
    cout << "Enter the number of vertices: ";
    cin >> vertex;
    cout << "Enter the number of edges: ";
    cin >> edgeCount;

    vector<vector<int>> edges(edgeCount, vector<int>(2));
    for (int i = 0; i < edgeCount; i++) {
        cin >> edges[i][0] >> edges[i][1];
    }

    unordered_map<int, list<int>> adjList;
    for (int i = 0; i < edges.size(); i++) {
        int u = edges[i][0];
        int v = edges[i][1];
        adjList[u].push_back(v);
        adjList[v].push_back(u);
    }

    int timer = 0;
    vector<int> disc(vertex, -1);
    vector<int> low(vertex, -1);
    unordered_map<int, bool> visited;
    vector<bool> ap(vertex, false);

    for (int i = 0; i < vertex; i++) {
        if (!visited[i]) {
            dfs(i, -1, disc, low, visited, adjList, ap, timer);
        }
    }

    cout << "Articulation points are as follows: ";
    for (int i = 0; i < vertex; i++) {
        if (ap[i]) {
            cout << i << " ";
        }
    }
    cout << endl;

    return 0;
}
