/* <---------------------CYCLE DETECTION IN DIRECTED GRAPH USING BFS CONCEPT-------------------------->*/

#include<bits/stdc++.h>
using namespace std;
// cycle detection
bool cycleDetectionInDirectedGraph(int vertex,vector<vector<int>>&edges){
	// creation af adjeceny list
	unordered_map<int,list<int>>adjList;
	for(int i = 0;i<edges.size();i++){
		int u = edges[i][0];
		int v = edges[i][1];
		
		// node connection
		adjList[u].push_back(v); // for directed graph
	}
	
	//finding indegree of all vertex
	vector<int>indegree(vertex,0);
	for(auto i:adjList){
		for(auto j:i.second){
			indegree[j]++;
		}
	}
	
	// creation of queue
	queue<int>q;
	// push node that in degree is equal to 0
	for(int i=0;i<vertex;i++){
		if(indegree[i] == 0){
			q.push(i);
		}
	}
	
	//do bfs
	int count=0;
	while(!q.empty()){
		int frontNode=q.front();
		q.pop();
		
		count++;
		
		for(auto neighbour:adjList[frontNode]){
			indegree[neighbour]--;
			if(indegree[neighbour] == 0){
				q.push(neighbour);
			}
		}
	}
	if(count == vertex){
		return false; // cycle is not exist
	}
	else {
		return true; // cycle is exist
	}
}
int main(){
	// taking input from user
	int vertex,edgeCount;
	cout<<"Enter the number of vertex:";
	cin>>vertex;
	cout<<"Enter the number of edgeCount:";
	cin>>edgeCount; // number of edge
	
	//creation of edges;
	vector<vector<int>>edges(edgeCount,vector<int>(2));
	cout << "Enter edge (u v):"<<endl;
	for(int i = 0;i<edgeCount;i++){
		cin>>edges[i][0] >> edges[i][1];
	}
	// Cycle detection function
	if(cycleDetectionInDirectedGraph(vertex,edges)){
		cout<<"Cycle is present.";
	}
	else {
		cout<<"Cycle is not present.";
	}
}
