/* <----------------------TOPOLOGICAL SORT USING DFS CONCEPT---------------------------->

NOTE:- topological sort is apply on directed acyclic graph 
*/

#include<bits/stdc++.h>
using namespace std;
// main logic of topological sort using concept of dfs
bool topoSort(unordered_map<int,list<int>>&adjList,unordered_map<int,bool>&visited,stack<int>&s,int node){
	//marking true 
	visited[node]=true;
	
	for(auto neighbour:adjList[node]){
		if(!visited[neighbour]){
			topoSort(adjList,visited,s,neighbour);
		}
	}
	s.push(node);
}

// topological sort
vector<int> topoLogicalSort(int vertex,vector<vector<int>>&edges){
	// creation af adjeceny list
	unordered_map<int,list<int>>adjList;
	for(int i = 0;i<edges.size();i++){
		int u = edges[i][0];
		int v = edges[i][1];
		
		// node connection
		adjList[u].push_back(v); // for directed graph
	}
	
	unordered_map<int,bool>visited;
	stack<int>s;
	
	// check for all nodes (it means also check for disconnected graph)
	for(int i = 0;i<vertex;i++){
		if(!visited[i]){
			topoSort(adjList,visited,s,i);
		}
	}
	// storing answer
	vector<int>ans;
	while(!s.empty()){
		ans.push_back(s.top());
		s.pop();
	}
	return ans;
	
}
int main(){
	// taking input from user
	int vertex,edgeCount;
	cout<<"Enter the number of vertex:";
	cin>>vertex;
	cout<<"Enter the number of edgeCount:";
	cin>>edgeCount; // number of edge
	
	//creation of edges;
	vector<vector<int>>edges(edgeCount,vector<int>(2));
	cout << "Enter edge (u v):"<<endl;
	for(int i = 0;i<edgeCount;i++){
		cin>>edges[i][0] >> edges[i][1];
	}
	// topological sort function
	vector<int> result = topoLogicalSort(vertex,edges);
	//printing topological sort
	cout<<"Topological sort is:";
	for(auto i:result){
		cout<<i<<" ";
	} 
	return 0;
}
