/* <-------------------------DEPTH FIRST SEARCH ALGORITHM------------------------------>*/
#include<bits/stdc++.h>
using namespace std;

// main logic of dfs
void dfs(map<int,list<int>>&adjList,unordered_map<int,bool>&visited,vector<int>&component,int node){
	component.push_back(node);
	// mark the visited 
	visited[node]=true;
	
	// check for neighbour node
	for(auto neighbour:adjList[node]){
		if(!visited[neighbour]){
			dfs(adjList,visited,component,neighbour);
		}
	}
}
vector<vector<int>> DepthFirstSearch(int vertex,vector<vector<int>>&edges){
	// adjecency list 
	// we can also use set instead of list for optimization purpose
	map<int,list<int>>adjList;
	for(int i=0;i<edges.size();i++){
		int u=edges[i][0];
		int v=edges[i][1];
		
		// connection of edge
		adjList[u].push_back(v);
		// for undirected graph;
		adjList[v].push_back(u);
	}
	
	// check node is visited or not
	unordered_map<int,bool>visited;
	vector<vector<int>>ans;
	
	// check for all vertex (it means also check for disconnected graph)
	for(int i=0;i<vertex;i++){
		vector<int>component;
		if(!visited[i]){
			dfs(adjList,visited,component,i);
			ans.push_back(component);
		}
	}
	return ans;
}
int main(){
	// taking input from user
	int vertex,edgeCount;
	cout<<"Enter the number of vertex:";
	cin>>vertex;
	cout<<"Enter the number of edgeCount:";
	cin>>edgeCount;
	
	//creation of edges
	vector<vector<int>>edges(edgeCount,vector<int>(2));
	cout << "Enter edge (u v):" << endl;
	for(int i=0;i<edgeCount;i++){
		cin>>edges[i][0] >> edges[i][1];
	}
	
	// Dfs function call
	vector<vector<int>> DFS = DepthFirstSearch(vertex,edges);
	
	// printing depth first search
	cout<<"Depth first search is:";
	for(auto i:DFS){
		for(auto j:i){
			cout<<j<<" ";
		}
	}
	return 0;
}
