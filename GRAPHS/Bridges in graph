// <------------------------Bridges in graph-------------------------->
#include<iostream>
#include<unordered_map>
#include<vector>
#include<list>
using namespace std;
void dfs(vector<int>&discovery,vector<int>&low,unordered_map<int,bool>&visited,int parent,
int node,int &timer,unordered_map<int,list<int>>&adjList,vector<vector<int>>&result){
	visited[node]=true;
	discovery[node]=low[node]=timer++;
	for(auto neighbour:adjList[node]){
		if(neighbour == parent){
			continue;
		}
		if(!visited[neighbour]){
			dfs(discovery,low,visited,node,neighbour,timer,adjList,result);
			low[node]=min(low[node],low[neighbour]);
			if(low[neighbour] > discovery[node]){
				vector<int>ans;
				ans.push_back(node);
				ans.push_back(neighbour);
				result.push_back(ans);
			}
		}
		else{
			//  back edge
			low[node]=min(low[node],discovery[neighbour]);
		}
	}
}
vector<vector<int>> findBridge(int vertex,vector<vector<int>>&edges){
	unordered_map<int,list<int>>adjList;
	for(int i=0;i<edges.size();i++){
		int u=edges[i][0];
		int v=edges[i][1];
		
		adjList[u].push_back(v);
		adjList[v].push_back(u);
	}
	
	int timer=0;
	vector<int>discovery(vertex);
	vector<int>low(vertex);
	unordered_map<int,bool>visited;
	int parent=-1;
	
	for(int i=0;i<vertex;i++){
		discovery[i]=-1;
		low[i]=-1;
	}
	
	vector<vector<int>>result;
	for(int i=0;i<vertex;i++){
		if(!visited[i]){
			dfs(discovery,low,visited,parent,i,timer,adjList,result);
		}
	}
	return result;
}
int main(){
	int vertex,edgeCount;
	cout<<"Enter the number of vertex:";
	cin>>vertex;
	cout<<"Enter the number of edgeCount:";
	cin>>edgeCount;
	vector<vector<int>>edges(edgeCount,vector<int>(2));
	for(int i=0;i<edgeCount;i++){
		cin>>edges[i][0] >> edges[i][1];
	}
	vector<vector<int>> ans=findBridge(vertex,edges);
	cout << "Bridges in the graph:" << endl;
    for (auto bridge : ans) {
        cout << bridge[0] << " - " << bridge[1] << endl;
    }
}
