// <-----------Cycle detection using BFS in direted graph--------------------->
#include<bits/stdc++.h>
using namespace std;
bool detectCycleDirectedGraph(int vertex,vector<vector<int>>&edges){
	unordered_map<int,list<int>>adjList;
	for(int i=0;i<edges.size();i++){
		int u=edges[i][0];
		int v=edges[i][1];
		
		adjList[u].push_back(v);
	}
	// find all indegree 
	vector<int>indegree(vertex);
	for(auto i:adjList){
		for(auto j:i.second){
			indegree[j]++;
		}
	}
	// push indegree in queue
	queue<int>q;
	for(int i=1;i<=vertex;i++){
		if(indegree[i]==0){
			q.push(i);
		}
	}
	int count=0;
	while(!q.empty()){
		int front=q.front();
		q.pop();
		
		count++;
		
		for(auto neighbour:adjList[front]){
			indegree[neighbour]--;
			if(indegree[neighbour]==0){
				q.push(neighbour);
			}
		}
	}
	if(count == vertex){
		return false;
	}
	else{
		return true;
	}
	
}
int main(){
	int vertex,edgeCount;
	cout<<"Enter the number of vertex:";
	cin>>vertex;
	cout<<"Enter the number of edgeCount:";
	cin>>edgeCount;
	
	vector<vector<int>>edges(edgeCount,vector<int>(2));
	for(int i=0;i<edgeCount;i++){
		cin>>edges[i][0] >> edges[i][1];
	}
	if(detectCycleDirectedGraph(vertex,edges)){
		cout<<"cycle is present.";
	}
	else{
		cout<<"cycle is not present.";
	}
}
