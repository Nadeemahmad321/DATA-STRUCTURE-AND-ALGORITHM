// <------------------Topological sort usig DFS concept---------------------->

#include <bits/stdc++.h>
using namespace std;
void topoSort(unordered_map<int,list<int>>&adjList,unordered_map<int,bool>&visited,stack<int>&s,int node){
	visited[node]=1;
	
	for(auto neighbour:adjList[node]){
		if(!visited[neighbour]){
			topoSort(adjList,visited,s,neighbour);
		}
	}
	s.push(node);
}
vector<int> topoLogicalSort(int vertex,vector<vector<int>>&edges){
	unordered_map<int,list<int>>adjList;
	cout<<endl<<endl<<"Adjecency list:"<<endl;
	for(int i=0;i<edges.size();i++){
		int u=edges[i][0];
		int v=edges[i][1];

		adjList[u].push_back(v);// only applied on directed graph
	
	}
		
	for(auto i:adjList){
		cout<<i.first<<"->";
		for(auto j:i.second){
			cout<<j<<" ";
		}
		cout<<endl;
	}
	cout<<endl;
	
	unordered_map<int,bool>visited;
	vector<int>ans;
	
	// check for all vertex
	stack<int>s;
	for(int i=0;i<vertex;i++){
		if(!visited[i]){
			topoSort(adjList,visited,s,i);
		}
	}
	
	while(!s.empty()){
		ans.push_back(s.top());
		s.pop();
	}
	return ans;
}
int main(){
	int vertex,edgeCount;
	cout<<"Enter the number of vertex:";
	cin>>vertex;
	cout<<"Enter the number of edge:";
	cin>>edgeCount;
	
	vector<vector<int>>edges(edgeCount,vector<int>(2));
	for(int i=0;i<edgeCount;i++){
		cin>>edges[i][0] >>edges[i][1];
	}
	
	vector<int>ans=topoLogicalSort(vertex,edges);
	cout<<"Topological sort:";
	for(auto i:ans){
		cout<<i<<" ";
	}	
}
