// <-----------------cycle detection using BFS concept----------------->
#include<iostream>
#include<vector>
#include<unordered_map>
#include<list>
#include<queue>
using namespace std;
bool isCycleBFS(unordered_map<int,list<int>>&adjList,unordered_map<int,bool>&visited,int src){
	unordered_map<int,int>parent;
	parent[src]=-1;
	visited[src]=1;
	queue<int>q;
	q.push(src);
	
	while(!q.empty()){
		int frontNode=q.front();
		q.pop();
		
		for(auto neighbour :adjList[frontNode]){
			if(visited[neighbour] == true && neighbour != parent[frontNode]){
				return true;
			}
			else if(!visited[neighbour]){
				q.push(neighbour);
				visited[neighbour]=1;
				parent[neighbour]=frontNode;
			}
		}
	}
	return false;
}
string cycleDetection(int vertex,vector<vector<int>>&edges){
	unordered_map<int,list<int>>adjList;
	unordered_map<int,bool>visited;
	
	for(int i=0;i<edges.size();i++){
		int u=edges[i][0];
		int v=edges[i][1];
		
		adjList[u].push_back(v);
		adjList[v].push_back(u);
	}
	
	for(int i=0;i<vertex;i++){
		if(!visited[i]){
			bool ans=isCycleBFS(adjList,visited,i);
			if(ans==1){
				return "YES";
			}
		}
	}
	return "NO";
}
int main(){
	int vertex;
	cout<<"Enter the number of vertex:";
	cin>>vertex;
	int edgeCount;
	cout<<"Enter the number of edge:";
	cin>>edgeCount;
	
	vector<vector<int>> edges(edgeCount,vector<int>(2));
	for(int i=0;i<edgeCount;i++){
		cin>>edges[i][0] >> edges[i][1];
	}
	string ans=cycleDetection(vertex,edges);
	cout<<ans<<endl;
}
