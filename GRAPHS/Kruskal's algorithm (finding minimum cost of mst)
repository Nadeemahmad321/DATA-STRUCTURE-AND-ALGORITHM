// <-----------------------Kruskal's algorithm (finding minimum cost of mst)-------------------->
#include<bits/stdc++.h>
using namespace std;
bool cmp(vector<int>&a,vector<int>&b){
	return a[2] < b[2];
}
// initializations
void makeSet(vector<int>&parent,vector<int>&rank,int vertex){
	for(int i=0;i<vertex;i++){
		parent[i]=i;
		rank[i]=0;
	}
}
// finding parent
int findParent(vector<int>&parent,int node){
	if(parent[node] == node){
	return node;		
	}
	return parent[node]=findParent(parent,parent[node]);
} 
// union
void unionSet(int u,int v,vector<int>&parent,vector<int>&rank){
	u=findParent(parent,u);
	v=findParent(parent,v);
	
	if(rank[u] < rank[v]){
		parent[u]=v;
	}
	else if(rank[v] < rank[u]){
		parent[v]=u;
	}
	else{
		parent[v]=u;
		rank[u]++;
	}
}
// minimum spanning tree
int minimumSpanningTree(int vertex,vector<vector<int>>&edges){
	sort(edges.begin(),edges.end(),cmp);
	vector<int>parent(vertex);
	vector<int>rank(vertex);
	makeSet(parent,rank,vertex);
	
	int minWeight=0;
	for(int i=0;i<edges.size();i++){
		int u=findParent(parent,edges[i][0]);
		int v=findParent(parent,edges[i][1]);
		int weight=edges[i][2];
		
		if(u != v){
			minWeight+=weight;
			unionSet(u,v,parent,rank);
		}
	}
	return minWeight;
}
int main(){
	int vertex,edgeCount;
	cout<<"Enter the number of vertex:";
	cin>>vertex;
	cout<<"Enter the number of edgeCount:";
	cin>>edgeCount;
	vector<vector<int>>edges(edgeCount,vector<int>(3));
	for(int i=0;i<edgeCount;i++){
		cin>>edges[i][0] >> edges[i][1] >>edges[i][2];
	}
	int ans=minimumSpanningTree(vertex,edges);
	cout<<"Minimum spanning cost is:"<<ans<<endl;
}
