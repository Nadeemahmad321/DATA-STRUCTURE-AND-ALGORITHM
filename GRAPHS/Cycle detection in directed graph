// <-----------Cycle detection in directed graph------------------->

#include<iostream>
#include<unordered_map>
#include<vector>
#include<list>
using namespace std;
bool checkCylceDFS(int node,unordered_map<int,bool>&visited,unordered_map<int,bool>&dfsVisited,unordered_map<int,list<int>>&adjList){
	visited[node]=true;
	dfsVisited[node]=true;
	for(auto neighbour:adjList[node]){
		if(!visited[neighbour]){
			bool cycleDetected=checkCylceDFS(neighbour,visited,dfsVisited,adjList);
			if(cycleDetected){
				return true;
			}
		}
		else if(dfsVisited[neighbour]){
			return true;
		}
	}
	dfsVisited[node]=false;
	return false;
}
bool detectCyclicDirectedGraph(int vertex,vector<vector<int>> &edges){
    unordered_map<int,list<int>>adjList; 
    for(int i=0;i<edges.size();i++){
    	int u=edges[i][0];
    	int v=edges[i][1];
    	
    	adjList[u].push_back(v);
	}
    unordered_map<int,bool>visited;  
    unordered_map<int,bool>dfsVisited;

    
    for(int i=1;i<=vertex;i++){
        if(!visited[i]){
            bool cycleFound=checkCylceDFS(i,visited,dfsVisited,adjList);
            if(cycleFound){
            	return true;
			}
        }
    }
    return false;
}
// main funtion
int main(){
    
    // number of vertex in Graph
    int vertex;
    cout<<"Enter the number of vertex:";
    cin>>vertex;
    
    // number of edges in Graph
    int edgeCount;
    cout<<"Enter the number of edge:";
    cin>>edgeCount;
    
    // taking input from user
    vector<vector<int>> edges(edgeCount,vector<int>(2));
    cout << "Enter the edges (u v) pairs:\n";
    for(int i=0;i<edgeCount;i++){
        cin>>edges[i][0] >> edges[i][1];
    }
    
    if(detectCyclicDirectedGraph(vertex,edges)){
    	cout<<"YES";
	}
	else{
		cout<<"NO";
	}
    
 
}
