// <----------------Prim's algorithm (finding minimm spanning tree)--------------------->
#include<bits/stdc++.h>
using namespace std;
vector<pair<pair<int,int>,int>> calculatePrimsMST(int vertex,vector<vector<int>>&edges){
	unordered_map<int,list<pair<int,int>>>adjList;
	for(int i=0;i<edges.size();i++){
		int u=edges[i][0];
		int v=edges[i][1];
		int w=edges[i][2];
		
		adjList[u].push_back({v,w});
		adjList[v].push_back({u,w});
	}
	
	vector<int>key(vertex+1);
	vector<bool>mst(vertex+1);
	vector<int>parent(vertex+1);
	
	for(int i=0;i<=vertex;i++){
		key[i]=INT_MAX;
		mst[i]=false;
		parent[i]=-1;
	}
	
	key[1]=0;
	parent[1]=-1;
	for(int i=1;i<vertex;i++){
		int mini=INT_MAX;
		int u;
		
		for(int v=1;v<=vertex;v++){
			if(mst[v] == false && key[v] < mini){
				u=v;
				mini=key[u];
 			}
		}
		mst[u]=true;
		
		for(auto it:adjList[u]){
			int v=it.first;
			int w=it.second;
			if(mst[v] == false && w < key[v]){
				parent[v]=u;
				key[v]=w;
			}
		}
	}
	vector<pair<pair<int,int>,int>> result;
	for(int i=2;i<=vertex;i++){
		result.push_back({{parent[i],i},key[i]});
	}
	return result;
}
int main(){
	int vertex,edgeCount;
	cout<<"Enter the number of vertex:";
	cin>>vertex;
	cout<<"Enter the number of edgeCount:";
	cin>>edgeCount;
	vector<vector<int>>edges(edgeCount,vector<int>(3));
	for(int i=0;i<edgeCount;i++){
		cin>>edges[i][0] >> edges[i][1] >>edges[i][2];
	}
	
	vector<pair<pair<int,int>,int>> ans=calculatePrimsMST(vertex,edges);
	 cout << "Edges in the MST:" << endl;
    for (const auto& edge : ans) {
        cout << edge.first.first << " -- " << edge.first.second << " with weight " << edge.second << endl;
    }
}
