/* <---------------CYCLE DETECTION IN DIRECTED GRAPH USING DFS CONCEPT---------------->*/
#include<bits/stdc++.h>
using namespace std;
// main logic of cycle detection using dfs concept
bool dfsConceptForCycleDetection(unordered_map<int,list<int>>&adjList,unordered_map<int,bool>&visited,unordered_map<int,bool>&dfsVisited,int node){
	//marking true 
	visited[node]=true;
	dfsVisited[node]=true;
	// check for neighbour
	for(auto neighbour:adjList[node]){
		if(!visited[neighbour]){
			bool cycleDetected = dfsConceptForCycleDetection(adjList,visited,dfsVisited,neighbour);
			if(cycleDetected){
				return true; //cycle is found
			}
		}
		else if(dfsVisited[neighbour]){
			return true; // cycle is found
		}
	}
	dfsVisited[node]=false;
	return false; // cycle is not present
}

//cycle dectection 
bool cycleDetectionInDirectedGraph(int vertex,vector<vector<int>>&edges){
	// creation af adjeceny list
	unordered_map<int,list<int>>adjList;
	for(int i = 0;i<edges.size();i++){
		int u = edges[i][0];
		int v = edges[i][1];
		
		// node connection
		adjList[u].push_back(v);  // directed graph 
	}
	
	unordered_map<int,bool>visited;
	unordered_map<int,bool>dfsVisited;
	
	// check for all nodes (it means also check for disconnected graph)
	for(int i = 0;i<vertex;i++){
		if(!visited[i]){
			// is cycle present
			bool ans = dfsConceptForCycleDetection(adjList,visited,dfsVisited,i);
			if(ans == true){
				return true;
			}
		}
	}
	return false;
}
int main(){
	// taking input from user
	int vertex,edgeCount;
	cout<<"Enter the number of vertex:";
	cin>>vertex;
	cout<<"Enter the number of edgeCount:";
	cin>>edgeCount; // number of edge
	
	//creation of edges;
	vector<vector<int>>edges(edgeCount,vector<int>(2));
	cout << "Enter edge (u v):"<<endl;
	for(int i = 0;i<edgeCount;i++){
		cin>>edges[i][0] >> edges[i][1];
	}
	// Cycle detection function call
	if(cycleDetectionInDirectedGraph(vertex,edges)){
		cout<<"Cycle is present.";
	}
	else{
		cout<<"Cycle is not present.";
	}
}
