/*<-------------------------------------------------TOTAL NUMBER OF OCCURRENCE------------------------------------------------------------->

NOTE :Complexity is O(logn) */

#include <iostream>
#include <vector>
using namespace std;

// Function to find the first occurrence of a key in a sorted array
int firstOccurrence(const vector<int>& arr, int key) {
    int start = 0; // Starting index of the array
    int end = arr.size() - 1; // Ending index of the array
    int ans = -1; // Variable to store the index of the first occurrence (initially -1 for not found)
    
    // Loop until the search space is valid
    while (start <= end) {
        int mid = start + (end - start) / 2; // Calculate the middle index
        
        if (arr[mid] == key) { // If the key is found
            ans = mid; // Record the position
            end = mid - 1; // Continue searching in the left half for the first occurrence
        } else if (arr[mid] > key) { // If the middle element is greater than the key
            end = mid - 1; // Search in the left half
        } else {
            start = mid + 1; // Search in the right half
        }
    }
    return ans; // Return the index of the first occurrence (or -1 if not found)
}

// Function to find the last occurrence of a key in a sorted array
int lastOccurrence(const vector<int>& arr, int key) {
    int start = 0; // Starting index of the array
    int end = arr.size() - 1; // Ending index of the array
    int ans = -1; // Variable to store the index of the last occurrence (initially -1 for not found)
    
    // Loop until the search space is valid
    while (start <= end) {
        int mid = start + (end - start) / 2; // Calculate the middle index
        
        if (arr[mid] == key) { // If the key is found
            ans = mid; // Record the position
            start = mid + 1; // Continue searching in the right half for the last occurrence
        } else if (arr[mid] > key) { // If the middle element is greater than the key
            end = mid - 1; // Search in the left half
        } else {
            start = mid + 1; // Search in the right half
        }
    }
    return ans; // Return the index of the last occurrence (or -1 if not found)
}

// Function to calculate the total number of occurrences of a key in a sorted array
int totalNumberOfOccurrence(const vector<int>& arr, int key) {
    int first = firstOccurrence(arr, key); // Find the first occurrence
    int last = lastOccurrence(arr, key); // Find the last occurrence
    
    // If the first occurrence is -1, the key is not present in the array
    if (first == -1) return 0; // Return 0 occurrences
    
    // Total occurrences is the difference between last and first indices plus one
    return (last - first) + 1; 
}

int main() {
    int size; // Variable to store the size of the vector
    cout << "Enter the size of vector: ";
    cin >> size; // Input size
    
    vector<int> arr(size); // Initialize a vector of the given size
    cout << "Enter the elements of vector: ";
    for (int i = 0; i < size; i++) {
        cin >> arr[i]; // Input elements into the vector
    }
    
    int key; // Variable to store the key to be searched
    cout << "Enter the key: ";
    cin >> key; // Input the key
    
    // Call the function to get the total number of occurrences and store the result
    int ans = totalNumberOfOccurrence(arr, key);
    
    // Output the total number of occurrences
    cout << "Total number of occurrences: " << ans << endl;
    
    return 0; // End of the program
}
