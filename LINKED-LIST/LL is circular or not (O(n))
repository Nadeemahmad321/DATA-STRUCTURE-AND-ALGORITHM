/* <--------------------------Reverse Linked List in k group---------------------------->*/


#include<iostream>
using namespace std;
class Node{
	public:
		int data;
		Node* next;
	
	public:
		Node(int data){
			this->data=data;
			this->next=NULL;
		}
};


void insertAtHead(Node* &tail,Node* &head,int data){
	if(head == NULL){
		Node* temp=new Node(data);
		head=temp;
		tail=temp;
	}
	else{
		Node* temp=new Node(data);
		temp->next=head;
		head=temp;
	}
}
// <----------------------------linked is circular or not------------------------>
bool isCircularLinkedList(Node* &head){
	
	if(head == NULL){
		return true;
	}
	
	Node* temp=head->next;
	while(temp != NULL){
		temp=temp->next;
		if(temp == head){
			return true;
		}
	}
	return false;
}


void print(Node* &ans){
	Node* temp=ans;
	while(temp != NULL){
		cout<<temp->data<<" ";
		temp=temp->next;
	}
	cout<<endl;
}

int main(){
	Node* head=NULL;
	Node* tail=NULL;
	
	insertAtHead(tail,head,10);
	cout<<"inserting at head:";
	print(head);
	
	insertAtHead(tail,head,9);
	cout<<"inserting at head:";
	print(head);
	
	insertAtHead(tail,head,11);
	cout<<"inserting at head:";
	print(head);
	
	insertAtHead(tail,head,14);
	cout<<"inserting at head:";
	print(head);
	
	insertAtHead(tail,head,15);
	cout<<"inserting at head:";
	print(head);
	
	if(isCircularLinkedList(head)){
		cout<<"given linked list is circular"<<endl;
	}
	else{
		cout<<"given linked list is not circular"<<endl;
	}
	
}
