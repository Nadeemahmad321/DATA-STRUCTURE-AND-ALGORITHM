/* <--------------------------Detect loop in linked list---------------------------->*/


#include<iostream>
#include<map>
using namespace std;
class Node{
	public:
		int data;
		Node* next;
	
	public:
		Node(int data){
			this->data=data;
			this->next=NULL;
		}
};


void insertAtHead(Node* &tail,Node* &head,int data){
	if(head == NULL){
		Node* temp=new Node(data);
		head=temp;
		tail=temp;
	}
	else{
		Node* temp=new Node(data);
		temp->next=head;
		head=temp;
	}
}



// <-------------------loop is present or not---------------------------->
bool isLoopPresent(Node* &head){
	
	if(head == NULL){
		return false;
	}
	
	map<Node*,bool>visited;
	
	Node* temp=head;
	while(temp != NULL){
		
		if(visited[temp] == true){
			return false;
		}
		visited[temp] == true;
		temp=temp->next;
	}
	return false;
}


void print(Node* &ans){
	Node* temp=ans;
	while(temp != NULL){
		cout<<temp->data<<" ";
		temp=temp->next;
	}
	cout<<endl;
}

int main(){
	Node* head=NULL;
	Node* tail=NULL;
	
	insertAtHead(tail,head,10);
	cout<<"inserting at head:";
	print(head);
	
	insertAtHead(tail,head,9);
	cout<<"inserting at head:";
	print(head);
	
	insertAtHead(tail,head,11);
	cout<<"inserting at head:";
	print(head);
	
	insertAtHead(tail,head,14);
	cout<<"inserting at head:";
	print(head);
	
	insertAtHead(tail,head,15);
	cout<<"inserting at head:";
	print(head);
	
	// Loop detection in linked list
	if(isLoopPresent(head)){
		cout<<"loop is present"<<endl;
	}
	else{
		cout<<"loop is not present"<<endl;
	}
}
