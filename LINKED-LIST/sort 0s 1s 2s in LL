/* <--------------------------sort 0s 1s 2s in linked list--------------------------->

approach (1) ->  time complexity is O(n) */


#include<iostream>
using namespace std;
class Node{
	public:
		int data;
		Node* next;
	
	public:
		Node(int data){
			this->data=data;
			this->next=NULL;
		}
};


void insertAtHead(Node* &tail,Node* &head,int data){
	if(head == NULL){
		Node* temp=new Node(data);
		head=temp;
		tail=temp;
	}
	else{
		Node* temp=new Node(data);
		temp->next=head;
		head=temp;
	}
}
/* <------------------------sort 0s 1s and 2s----------------------------->*/


Node* sorting(Node* &head){
	
	if(head == NULL){
		return NULL;
	}
	
	int zeroCount=0;
	int oneCount=0;
	int twoCount=0;
	Node* temp=head;
	
	while(temp != NULL){
		if(temp->data == 0){
			zeroCount++;
		}
		else if(temp->data == 1){
			oneCount++;
		}
		else if(temp->data == 2){
			twoCount++;
		}
		else{
			cout<<"enter a valid number";
		}
		temp=temp->next;
	}
	
	temp=head;
	while(temp != NULL){
		if(zeroCount != 0){
			temp->data=0;
			zeroCount--;
		}
		else if(oneCount != 0){
			temp->data=1;
			oneCount--;
		}
		else if(twoCount != 0){
			temp->data=2;
			twoCount--;
		}
		temp=temp->next;
	}
	return head;
}
void print(Node* &head){
	Node* temp=head;
	while(temp != NULL){
		cout<<temp->data<<" ";
		temp=temp->next;
	}
	cout<<endl;
}


int main(){
	Node* head=NULL;
	Node* tail=NULL;
	
	insertAtHead(tail,head,2);
	cout<<"inserting node at head:";
	print(head);
	
	insertAtHead(tail,head,0);
	cout<<"inserting node at head:";
	print(head);
	
	insertAtHead(tail,head,2);
	cout<<"inserting node at head:";
	print(head);
	
	
	insertAtHead(tail,head,1);
	cout<<"inserting node at head:";
	print(head);
	
	insertAtHead(tail,head,1);
	cout<<"inserting node at head:";
	print(head);
	
	
	insertAtHead(tail,head,2);
	cout<<"inserting node at head:";
	print(head);
	
	insertAtHead(tail,head,0);
	cout<<"inserting node at head:";
	print(head);
	
	// sort 0 1 2 in linked list
	sorting(head);
	cout<<"after sorting linked list is:"<<endl;
	print(head);
}
