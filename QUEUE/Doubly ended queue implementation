// <------------------ Doubly ended queue implementation------------------->


#include<iostream>
using namespace std;

class dQueue{
	public:
		int *arr;
		int size;
		int qfront;
		int rear;
		dQueue(int size){
			this->size=size;
			arr=new int[size];
			qfront=-1;
			rear=-1;
		}
		// push element from front
		int pushFront(int data){
			if(qfront == 0 && rear == size-1 || rear == (qfront-1)%(size-1)){
				return false;
			}
			else if(qfront == -1){
				qfront=rear=0;
				arr[qfront]=data;
			}
			else if(qfront == 0 && rear!=size-1){
				qfront=size-1;
				arr[qfront]=data;
			}
			else{
				qfront--;
			}
			
		}
		// push element from Rear
		int pushRear(int data){
			if(qfront == 0 && rear==size-1 || rear==(qfront-1)%(size-1)){
				return false;
			}
			else if(qfront == -1){
				qfront=rear=0;
				arr[rear]=data;
			}
			else if(rear == size-1 && qfront!=0){
				rear=0;
				arr[rear]=data;
			}
			else{
				rear++;
				arr[rear]=data;
			}
		} 
		
		// Remove element from front
		int popFront(){
			if(qfront == -1){
				return false;
			}
			int ans1=arr[qfront];
			arr[qfront]=-1;
			if(qfront == rear){
				arr[qfront]=-1;
			}
			else if(qfront == size-1){
				qfront=0;
			}
			else{
				qfront++;
			}
			return ans1;
		}
		
		// Remove element from rear
		int popRear(){
			if(qfront == -1){
				return false;
			}
			int ans2=arr[rear];
			arr[rear]=-1;
			if(qfront == rear){
				qfront=rear=-1;
			}
			else if(rear == 0){
				rear=size-1;
			}
			else{
				rear--;
			}
			return ans2;
		}
};
int main(){
	
	dQueue d(5);
	
	d.pushRear(10);
	d.pushRear(30);
	d.pushRear(40);
	d.pushRear(50);
	int ans2=d.popRear();
	cout<<"Removed from front:"<<ans2<<endl;
	int ans1=d.popFront();
	cout<<"Removed from front:"<<ans1<<endl;
	ans1=d.popFront();
	cout<<"Removed from front:"<<ans1<<endl;
	
}
