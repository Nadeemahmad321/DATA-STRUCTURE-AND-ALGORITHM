// <---------------circular queue implementation------------------>


#include<iostream>
using namespace std;

class Queue{
	public:
		int *arr;
	    int size;
    	int qfront;
    	int rear;
    	
    	// constructer call
    	Queue(int size){
    		this->size=size;
    		arr=new int[size];
    		qfront=-1;
    		rear=-1;
		}
		
		
		// Add element in queue
		void push(int data){
			if(qfront == 0 && rear == size-1 || rear==(qfront-1)%(size-1)){
				cout<<"queue is already full!"<<endl;
			}
			else if(qfront == -1){
				qfront=rear=0;
				arr[rear]=data;
				
			}
			else{
				rear++;
				arr[rear]=data;
			}
		}
		
		int pop(){
			if(qfront == -1){
//				cout<<"queue is already empty!"<<endl;
                return false;
			}
			int ans =arr[qfront];
			arr[qfront]=-1;
			if(qfront == rear){
				qfront=rear=-1;
			}
			else if(qfront == size-1){
				qfront=0;
			}
			else{
				qfront++;
			}
			return ans;
		}
};

int main(){
	
	Queue q(5);
	
	q.push(30);
	q.push(40);

	int s=q.pop();
	s=q.pop();
	cout<<"popped element:"<<s<<endl;
	cout<<"popped element:"<<s<<endl;
}
