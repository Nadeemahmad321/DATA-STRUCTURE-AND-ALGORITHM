// <-------------vertical traversal------------------>

#include<iostream>
#include<queue>
#include<vector>
#include<map>
using namespace std;
class Node{
	public:
		int data;
		Node* left;
		Node* right;
	public:
		Node(int data){
			this->data=data;
			this->left=NULL;
			this->right=NULL;
			
		}
};

// building tree
Node* buildTree(Node* root){
	cout<<"Enter the data:";
	int data;
	cin>>data;
	
	root=new Node(data);
	
	if(data == -1){
		return NULL;
	}
	
	cout<<"Enter the node left of:"<<root->data<<endl;
	root->left=buildTree(root->left);
	cout<<"Enter the node right of:"<<root->data<<endl;
	root->right=buildTree(root->right);
	
	return root;
}


// vertical traversal
vector<int> verticalTraversal(Node* root){
	map<int,map<int,vector<int> > >nodes;
	queue<pair<Node*,pair<int,int> > > q;
	
	vector<int>ans;
	
	if(root == NULL){
		return ans;
	}
	q.push(make_pair(root,make_pair(0,0)));
	
	
	while(!q.empty()){
		pair<Node*,pair<int,int> > temp=q.front();
		q.pop();
		Node* frontNode=temp.first;
		int horizontolDistance=temp.second.first;
		int level=temp.second.second;
		nodes[horizontolDistance][level].push_back(frontNode->data);
		if(frontNode->left){
			q.push(make_pair(frontNode->left,make_pair(horizontolDistance-1,level+1)));
		}
		if(frontNode->right){
			q.push(make_pair(frontNode->right,make_pair(horizontolDistance+1,level+1)));
		}
	}
	for(auto i:nodes){
		for(auto j:i.second){
			for(auto k:j.second){
				ans.push_back(k);
			}	
		}
	}
	return ans;
}


int main(){
	Node* root=NULL;
	
	root=buildTree(root);
	
	// vertical traversal
	vector<int> ans=verticalTraversal(root);
	for(int i=0;i<ans.size();i++){
		cout<<ans[i]<<" ";
	}
}
