// <-----------------check for balanced tree O(n)----------------->

/* Given a binary tree , find if its height is balanced or not .
a tree is height balanced if difference between heights of left and right subtrees is not
more than one <-----for all nodes of tree---->.*/


#include<iostream>
using namespace std;
class Node{
	public:
    	int data;
    	Node* left;
    	Node* right;
    	
    public:
    	Node(int data){
    		this->data=data;
    		this->left=NULL;
    		this->right=NULL;
		}
};

Node* buildTree(Node* root){
	cout<<"Enter the data:";
	int data;
	cin>>data;
	
	root=new Node(data);
	if(data == -1){
		return NULL;
	}
	
	cout<<"Enter the left node of:"<<root->data<<endl;
	root->left=buildTree(root->left);
	
	cout<<"Enter the right node of:"<<root->data<<endl;
	root->right=buildTree(root->right);
	
	return root;
}


pair<bool,int> isBalancedFast(Node* root){
	if(root == NULL){
		pair<bool,int> p=make_pair(true,0);
		return p;
	}
	
	
	pair<bool,int> left=isBalancedFast(root->left);
	pair<bool,int> right=isBalancedFast(root->right);
	
	bool leftAns=left.first;
	bool rightAns=right.first;
	
	
	bool diff= abs(left.second - right.second) <=1; 
	
	
	pair<bool,int> ans;
	ans.second=max(left.second,right.second) + 1;
	if(leftAns && rightAns && diff){
		ans.first=true;
	}
	else{
		ans.first=false;
	}
	return ans;
}

// tree is balanced or not
bool isBalanced(Node* root){
	
	return isBalancedFast(root).first;
}


int main(){
	
	Node* root=NULL;
	
	root=buildTree(root);
	
	// function call
	if(isBalanced(root)){
		cout<<"Tree is balanced."<<endl;
	}
	else{
		cout<<"Tree is not balanced."<<endl;
	}	
}
