// <----------------Bottom view of binary tree------------------->


#include<iostream>
#include<queue>
#include<vector>
#include<map>
using namespace std;
class Node{
	public:
		int data;
		Node* left;
		Node* right;
	public:
		Node(int data){
			this->data=data;
			this->left=NULL;
			this->right=NULL;
			
		}
};

// building tree
Node* buildTree(Node* root){
	cout<<"Enter the data:";
	int data;
	cin>>data;
	
	root=new Node(data);
	
	if(data == -1){
		return NULL;
	}
	
	cout<<"Enter the node left of:"<<root->data<<endl;
	root->left=buildTree(root->left);
	cout<<"Enter the node right of:"<<root->data<<endl;
	root->right=buildTree(root->right);
	
	return root;
}

// Bottom view of binary tree
vector<int> bottomView(Node* root){
	vector<int>ans;
	if(root == NULL){
		return ans;
	}
	
	map<int,int> topNode;
	queue<pair<Node*,int> > q;
	
	q.push(make_pair(root,0));
	
	while(!q.empty()){
		pair<Node*,int> temp=q.front();
		q.pop();
		
		Node* frontNode=temp.first;
		int hd=temp.second;
		
		topNode[hd]=frontNode->data;
		
		if(frontNode->left){
			q.push(make_pair(frontNode->left,hd-1));
		}
		if(frontNode->right){
			q.push(make_pair(frontNode->right,hd+1));
		}
	}
	for(auto i:topNode){
		ans.push_back(i.second);
	}
}

int main(){
	Node* root=NULL;
	
	root=buildTree(root);
	
	// Bottom view of binary tree
	vector<int>ans=bottomView(root);
	for(int i=0;i<ans.size();i++){
		cout<<ans[i]<<" ";
	}
}
