// <----------------sum tree or not----------------->


#include<iostream>
using namespace std;
class Node{
	public:
    	int data;
    	Node* left;
    	Node* right;
    	
    public:
    	Node(int data){
    		this->data=data;
    		this->left=NULL;
    		this->right=NULL;
		}
	
};

Node* buildTree(Node* root){
	cout<<"Enter the data:";
	int data;
	cin>>data;
	
	root=new Node(data);
	if(data == -1){
		return NULL;
	}
	
	cout<<"Enter the left node of:"<<root->data<<endl;
	root->left=buildTree(root->left);
	
	cout<<"Enter the right node of:"<<root->data<<endl;
	root->right=buildTree(root->right);
	
	return root;
}


pair<bool,int> sumTreeFast(Node* root){
	if(root == NULL){
		pair<bool,int>p=make_pair(true,0);
		return p;
	}
	if(root->left == NULL && root->right == NULL){
		pair<bool,int>p=make_pair(true,root->data);
		return p;
	}
	
	pair<bool,int> leftAns=sumTreeFast(root->left);
	pair<bool,int> rightAns=sumTreeFast(root->right);
	
	bool left=leftAns.first;
	bool right=rightAns.first;
	
	bool condn=root->data == leftAns.second + rightAns.second;
	
	pair<bool,int>ans;
	if(left && right && condn){
		ans.first=true;
	}
	else{
		ans.first=false;
	}
}

// sum tree or not 
int sumTree(Node* root){
	return sumTreeFast(root).first;
}


int main(){
	
	Node* root=NULL;
	
	root=buildTree(root);
	
	if(sumTree(root)){
		cout<<"sum tree."<<endl;
	}
	else{
		cout<<"not a sum tree."<<endl;
	}
}
