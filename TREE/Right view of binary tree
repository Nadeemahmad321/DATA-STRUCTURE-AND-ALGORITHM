// <-------------Right view of binary tree----------------->


#include<iostream>
#include<vector>
using namespace std;
class Node{
	public:
		int data;
		Node* left;
		Node* right;
	public:
		Node(int data){
			this->data=data;
			this->left=NULL;
			this->right=NULL;
			
		}
};

// building tree
Node* buildTree(Node* root){
	cout<<"Enter the data:";
	int data;
	cin>>data;
	
	root=new Node(data);
	
	if(data == -1){
		return NULL;
	}
	
	cout<<"Enter the node left of:"<<root->data<<endl;
	root->left=buildTree(root->left);
	cout<<"Enter the node right of:"<<root->data<<endl;
	root->right=buildTree(root->right);
	
	return root;
}

void solve(Node* root,vector<int> &ans,int level){
	if(root == NULL){
		return ;
	}
	if(level == ans.size()){
		ans.push_back(root->data);
	}
	
	solve(root->right,ans,level+1);
	solve(root->left,ans,level+1);
}


// right view binar tree
vector<int> rightView(Node* root){
	vector<int>ans;
	solve(root,ans,0);
	return ans;
}

int main(){
	Node* root=NULL;
	
	root=buildTree(root);
	
	// right view of binary tree
	vector<int>ans=rightView(root);
	for(int i=0;i<ans.size();i++){
		cout<<ans[i]<<" ";
	}
}
