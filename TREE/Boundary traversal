// <------------------Boundary traversal------------------>


#include<iostream>
#include<queue>
#include<vector>
using namespace std;
class Node{
	public:
		int data;
		Node* left;
		Node* right;
	public:
		Node(int data){
			this->data=data;
			this->left=NULL;
			this->right=NULL;
			
		}
};

// building tree
Node* buildTree(Node* root){
	cout<<"Enter the data:";
	int data;
	cin>>data;
	
	root=new Node(data);
	
	if(data == -1){
		return NULL;
	}
	
	cout<<"Enter the node left of:"<<root->data<<endl;
	root->left=buildTree(root->left);
	cout<<"Enter the node right of:"<<root->data<<endl;
	root->right=buildTree(root->right);
	
	return root;
}

// traverse right
void traverseRight(Node* root,vector<int> &ans){
	if(root == NULL || (root->left == NULL && root->right == NULL)){
		return ;
	}
	
	if(root->right){
		traverseRight(root->right,ans);
	}
	else{
		traverseRight(root->left,ans);	
	}
	ans.push_back(root->data);
	
}
// traverse leaf
void traverseLeaf(Node* root,vector<int> &ans){
	if(root == NULL){
		return;
	}
	if(root->left == NULL && root->right == NULL){
		ans.push_back(root->data);
	}
	
	// left subtree
	traverseLeaf(root->left,ans);
	
	// right subtree
	traverseLeaf(root->right,ans);
}


// traverse left 
void traverseLeft(Node* root,vector<int> &ans){
	if(root == NULL || (root->left == NULL && root->right == NULL)){
		return ;
	}
	
	ans.push_back(root->data);
	if(root->left){
		traverseLeft(root->left,ans);
	}
	else{
		traverseLeft(root->right,ans);
	}
	
}


// boundary traversal
vector<int> boundaryTraversal(Node* root){
	vector<int>ans;
	if(root == NULL){
		return ans;
	}
	ans.push_back(root->data);
	
	// traverse left
	traverseLeft(root->left,ans);
	
	// traverse leaf
	traverseLeaf(root->left,ans);
	traverseLeaf(root->right,ans);
	
	// traverse right
	traverseRight(root->right,ans);
	
	return ans;
}


int main(){
	Node* root=NULL;
	
	root=buildTree(root);
	
	vector<int> ans=boundaryTraversal(root);
	for(int i=0;i<ans.size();i++){
		cout<<ans[i]<<" ";
	}
}
