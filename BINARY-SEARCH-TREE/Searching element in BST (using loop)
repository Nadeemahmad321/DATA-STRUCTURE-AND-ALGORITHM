// <-----------------Searching element in BST (using loop)-------------------->

#include<iostream>
using namespace std;
class Node{
	public:
		int data;
		Node* left;
		Node* right;
	
	public:
		Node(int data){
			this->data=data;
			this->left=NULL;
			this->right=NULL;
		}
};


// <-------------------------Search element in BST------------------------->
bool searchElementInBST(Node* &root,int x){
	Node* temp=root;
	
	while(temp != NULL){
		if(temp->data == x){
			return true;
		}
		if(temp->data > x){
			temp=temp->left;
		}
		else{
			temp=temp->right;
		}
	}
	return false;
}


// <-------------------insert element into binary search tree----------------------->
Node* insertIntoBST(Node* &root,int data){
	if(root == NULL){
		root=new Node(data);
		return root;
	}
	
	if(data > root->data){
		root->right=insertIntoBST(root->right,data);
	}
	else{
		root->left=insertIntoBST(root->left,data);
	}
	return root;
}

// <-------------------Take input for Binary search tree------------------------->
void takeInput(Node* &root){
	int data;
	cin>>data;
	while(data != -1){
		root=insertIntoBST(root,data);
		cin>>data;
	}
}


int main(){
	Node* root=NULL;
	
	cout<<"Enter the data for creation of BST"<<endl;
	takeInput(root);
	
	cout<<endl;
	int x;
	cout<<"Enter the element you want to search:";
	cin>>x;
	cout<<endl;
	if(searchElementInBST(root,x)){
		cout<<"Element is found"<<endl;
	}
	else{
		cout<<"Element is not found"<<endl;
	}
}
