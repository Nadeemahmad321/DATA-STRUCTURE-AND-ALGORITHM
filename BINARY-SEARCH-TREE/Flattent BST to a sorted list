// <------------------Flattent BST to a sorted list---------------------->

#include<iostream>
#include<vector>
using namespace std;
class Node{
	public:
		int data;
		Node* left;
		Node* right;
	
	public:
		Node(int data){
			this->data=data;
			this->left=NULL;
			this->right=NULL;
		}
};

void inOrderTraversal(Node* &root,vector<int>&arr){
	if(root == NULL){
		return;
	}
	
	inOrderTraversal(root->left,arr);
	arr.push_back(root->data);
	inOrderTraversal(root->right,arr);
}

// BST flatten 
Node* flatten(Node* &root){
		
	vector<int>arr;
	inOrderTraversal(root,arr);
	int n=arr.size();
	
	Node* newRoot=new Node(arr[0]);
	Node* curr=newRoot;
	for(int i=1;i<n;i++){
		Node* temp=new Node(arr[i]);
		curr->left=NULL;
		curr->right=temp;
		curr=temp;
	}
	curr->left=NULL;
	curr->right=NULL;
	return newRoot;
}


Node* insertIntoBST(Node* &root,int data){
	if(root == NULL){
		root=new Node(data);
		return root;
	}
	
	if(root->data > data){
		root->left=insertIntoBST(root->left,data);
	}
	else{
		root->right=insertIntoBST(root->right,data);
	}
	return root;
}


Node* takeInput(Node* &root){
	int data;
	cin>>data;
	while(data != -1){
		root=insertIntoBST(root,data);
		cin>>data;
	}
	return root;
}


int main(){
	Node* root=NULL;
	
	cout<<"Enter the data for creation of BST"<<endl;
	takeInput(root);
	
	Node* ans=flatten(root);
	while(ans != NULL){
		cout<<ans->data<<" ";
		ans=ans->right;
	}	
}
