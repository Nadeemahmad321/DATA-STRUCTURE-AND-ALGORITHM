/* <----------------------Deletion from BST--------------------------->
Handled all cases 
1) : zero child 
2) : one child 
3) : Two child */

#include<iostream>
#include<queue>
using namespace std;
class Node{
	public:
		int data;
		Node* left;
		Node* right;
	
	public:
		Node(int data){
			this->data=data;
			this->left=NULL;
			this->right=NULL;
		}
};


void levelOrderTraversal(Node* &root){
	queue<Node*>q;
	q.push(root);
	q.push(NULL);
	
	while(!q.empty()){
		Node* temp=q.front();
		q.pop();
		
		if(temp == NULL){
			cout<<endl;
			if(!q.empty()){
				q.push(NULL);
			}
		}
		else{
			cout<<temp->data<<" ";
			
			if(temp->left){
				q.push(temp->left);
			}
			if(temp->right){
				q.push(temp->right);
			}
		}
	}
}

// <----------------minimum value in BST------------------>
Node* minVal(Node* &root){
	Node* temp=root;
	while(temp->left != NULL){
		temp=temp->left;
	}
	return temp;
}

// <--------------------Deletion from binary tree----------------------->
Node* deleteNodeFromBST(Node* &root,int val){
	if(root == NULL){
		return root;
	}
	
	if(root->data == val){
		// 0 child
		if(root->left == NULL && root->right == NULL){
			delete root;
			return NULL;
		}
		
		// 1 child 
		// left child
	    if(root->left != NULL && root->right == NULL){
			Node* temp=root->left;
			delete root;
			return temp;
		}
		
		// right child
		if(root->left == NULL && root->right != NULL){
			Node* temp=root->right;
			delete root;
			return temp;
		}
		
		// 2 child
		if(root->left != NULL && root->right != NULL){
			int mini=minVal(root->right)->data;
			root->data=mini;
			root->right=deleteNodeFromBST(root->right,mini);
			return root;
		}
	}
	else if(root->data > val){
		root->left=deleteNodeFromBST(root->left,val);
		return root;
	}
	else{
		root->right=deleteNodeFromBST(root->right,val);
		return root;
	}
}


// <-------------------insert element into binary search tree----------------------->
Node* insertIntoBST(Node* &root,int data){
	if(root == NULL){
		root=new Node(data);
		return root;
	}
	
	if(data > root->data){
		root->right=insertIntoBST(root->right,data);
	}
	else{
		root->left=insertIntoBST(root->left,data);
	}
	return root;
}

// <-------------------Take input for Binary search tree------------------------->
void takeInput(Node* &root){
	int data;
	cin>>data;
	while(data != -1){
		root=insertIntoBST(root,data);
		cin>>data;
	}
}


int main(){
	Node* root=NULL;
	
	cout<<"Enter the data for creation of BST"<<endl;
	takeInput(root);
	
	cout<<endl<<"levelOrder traversal"<<endl;
	levelOrderTraversal(root);
	
	cout<<endl;
	int val;
	cout<<"Enter the value you want to delete:";
	cin>>val;
	
	
	root=deleteNodeFromBST(root,val);
	cout<<endl<<"levelOrder traversal"<<endl;
	levelOrderTraversal(root);
}
