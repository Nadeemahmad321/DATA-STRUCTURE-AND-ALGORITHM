/* <--------------------------------Valid BST or not---------------------------->*/

#include<iostream>
using namespace std;
class Node{
	public:
		int data;
		Node* left;
		Node* right;
	
	public:
		Node(int data){
			this->data=data;
			this->left=NULL;
			this->right=NULL;
		}
};

bool isValid(Node* &root,int min,int max){
	if(root == NULL){
		return true;
	}
	
	if(root->data >= min && root->data <= max){
		bool left=isValid(root->left,min,root->data);
		bool right=isValid(root->right,root->data,max);
		return left && right;
	}
	else{
		return false;
	}
}

// valid or not
bool isValidBST(Node* &root){
	return isValid(root,INT_MIN,INT_MAX);
}


void inOrderTraversal(Node* &root){
	if(root == NULL){
		return;
	}
	
	inOrderTraversal(root->left);
	cout<<root->data<<" ";
	inOrderTraversal(root->right);
}


Node* insertIntoBST(Node* &root,int data){
	if(root == NULL){
		root=new Node(data);
		return root;
	}
	
	if(root->data > data){
		root->left=insertIntoBST(root->left,data);
	}
	else{
		root->right=insertIntoBST(root->right,data);
	}
	return root;
}


Node* takeInput(Node* &root){
	int data;
	cin>>data;
	while(data != -1){
		root=insertIntoBST(root,data);
		cin>>data;
	}
	return root;
}


int main(){
	Node* root=NULL;
	
	cout<<"Enter the data for creation of BST"<<endl;
	takeInput(root);
	
	cout<<endl<<"inOrder Traversal"<<endl;
	inOrderTraversal(root);
	
	cout<<endl;
	if(isValidBST(root)){
		cout<<"Given tree is valid binary search tree"<<endl;
	}
	else{
		cout<<"Given tree is not valid binary search tree"<<endl;
	}
}
