/* <------------------predecessor and successor in BST-----------------------> */


#include<iostream>
using namespace std;
class Node{
	public:
		int data;
		Node* left;
		Node* right;
	
	public:
		Node(int data){
			this->data=data;
			this->left=NULL;
			this->right=NULL;
		}
};

// <---------------------predecessor and Successor-------------------------->
pair<int,int> predecessorSuccessor(Node* &root,int key){
	Node* temp=root;
	int pred=-1;
	int suc=-1;
	while(temp->data != key){
		if(temp->data > key){
			suc=temp->data;
			temp=temp->left;
		}
		else{
			pred=temp->data;
			temp=temp->right;
		}
	}
	
	Node* leftTree=temp->left;
	while(leftTree != NULL){
		pred=leftTree->data;
		leftTree=leftTree->right;
	}
	
	Node* rightTree=temp->right;
	while(rightTree != NULL){
		suc=rightTree->data;
		rightTree=rightTree->left;
	}
	
	pair<int,int>ans=make_pair(pred,suc);
	return ans;
}

void inOrderTraversal(Node* &root){
	if(root == NULL){
		return;
	}
	
	inOrderTraversal(root->left);
	cout<<root->data<<" ";
	inOrderTraversal(root->right);
}


Node* insertIntoBST(Node* &root,int data){
	if(root == NULL){
		root=new Node(data);
		return root;
	}
	
	if(root->data > data){
		root->left=insertIntoBST(root->left,data);
	}
	else{
		root->right=insertIntoBST(root->right,data);
	}
	return root;
}


Node* takeInput(Node* &root){
	int data;
	cin>>data;
	while(data != -1){
		root=insertIntoBST(root,data);
		cin>>data;
	}
	return root;
}


int main(){
	Node* root=NULL;
	
	cout<<"Enter the data for creation of BST"<<endl;
	takeInput(root);
	
	cout<<endl<<"inOrder Traversal"<<endl;
	inOrderTraversal(root);
	
	cout<<endl;
	int key;
	cout<<"Enter the key:";
	cin>>key;
	
	pair<int,int>ans=predecessorSuccessor(root,key);
	cout<<"predecessor:"<<ans.first<<endl;
	cout<<"Successor:"<<ans.second<<endl;
	
}
