// <---------------------------valid paranthesis--------------------------->


#include<iostream>
#include<stack>
using namespace std;
// checking valid paranthesis
bool isValidParanthesis(stack<char>&s,string expression){
	
	for(int i=0;i<expression.length();i++){
		char ch=expression[i];
		
		// push opening bracket
		if((ch == '(') || (ch == '[') || (ch == '{')){
			s.push(ch);
		}
		else{
			if(!s.empty()){
				char top=s.top();
				
				// popping element from stack
				if((ch == ')' && top == '(') || 
				(ch == ']' && top == '[') ||
				(ch == '}' && top == '{')){
					s.pop();
				}
				else{
					return false;
				}
			}
			else{
				return false;
			}
		}
	}
	if(s.empty()){
		return true;
	}
	else{
		return false;
	}
}

int main(){
	stack<char>s;
	string str="[()]";
	if(isValidParanthesis(s,str)){
		cout<<"Balanced bracket."<<endl;
	}
	else{
		cout<<"unBalanced bracket."<<endl;
	}
	
}
