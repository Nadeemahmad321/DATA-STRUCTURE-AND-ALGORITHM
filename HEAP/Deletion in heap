/* <------------------------Deletion in heap------------------------------->
compexity O(logn)  */

#include<iostream>
using namespace std;
// creation of heap
class heap{
	public:
		int arr[100];
		int size;
		
		heap(){
			arr[0]=-1;
			size=0;
		}
		
		// insert function
		void insert(int val){
			size=size+1;
			int index=size;
			arr[index]=val;
			
			while(index > 1){
				int parent=index/2;
				if(arr[parent] < arr[index]){
					swap(arr[index],arr[parent]);
					index=parent;
				}
				else{
					return;
				}
			}
		}
		
		// delete function
		void deleteFromHeap(){
			if(size == 0){
				return;
			}
			
			// step 1: swap or overwrite first with last element
			arr[1]=arr[size];
			
			// step 2: remove last element 
			size--;
			
			// step 3: take root to its correct position
			int i=1;
			while(i < size){
				int leftIndex=2*i;
				int rightIndex=2*i+1;
				if(leftIndex < size && arr[i] < arr[leftIndex]){
					swap(arr[i],arr[leftIndex]);
					i=leftIndex;
				}
				else if(rightIndex < size && arr[i] < arr[rightIndex]){
					swap(arr[i],arr[rightIndex]);
					i=rightIndex;
				}
				else{
					return;
				}
			}
		}
		
		// print function
		void print(){
			for(int i=1;i<=size;i++){
				cout<<arr[i]<<" ";
			}
			cout<<endl;
		}
};
int main(){
	
	// object creation for heap
	heap h;
	
	// inserting element in heap
	h.insert(10);
	h.insert(90);
	h.insert(40);
	h.insert(8);
	h.insert(7);
	h.insert(6);
	h.insert(80);
	
	// printing heap
	h.print();
	
	// delete element from heap
	h.deleteFromHeap();
	h.print();
}
